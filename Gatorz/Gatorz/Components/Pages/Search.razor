@page "/search"
@using Gatorz.Models
@using Gatorz.Services
@inject ITravelPackageService TravelPackageService
@inject NavigationManager NavigationManager
@inject ILogger<Search> Logger
@rendermode InteractiveServer

<PageTitle>Search for Travel - Gatorz</PageTitle>

<div class="search-container">
    <h2>Find your perfect trip</h2>
    <p class="lead mb-4">Search among our many travel package offers with flight and hotel</p>

    <div class="search-form p-4 bg-white rounded shadow-sm">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="origin" class="form-label">From:</label>
                    <input id="origin" class="form-control" @bind="Origin" placeholder="Departure from... (e.g., CPH)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="destination" class="form-label">To:</label>
                    <input id="destination" class="form-control" @bind="Destination" placeholder="Destination... (e.g., BCN)" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="departureDate" class="form-label">Departure date:</label>
                    <input id="departureDate" type="date" class="form-control" @bind="DepartureDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="returnDate" class="form-label">Return date:</label>
                    <input id="returnDate" type="date" class="form-control" @bind="ReturnDate" min="@DepartureDate.AddDays(1).ToString("yyyy-MM-dd")" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary w-100" @onclick="SearchTravelPackages">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Debug Info Section - you can remove this in production -->
<div class="mt-3 p-3 bg-light">
    <h5>Debug Information</h5>
    <p>Origin: @Origin</p>
    <p>Destination: @Destination</p>
    <p>Departure Date: @DepartureDate.ToString("yyyy-MM-dd")</p>
    <p>Return Date: @ReturnDate.ToString("yyyy-MM-dd")</p>
    <p>Has Searched: @hasSearched</p>
    <p>Is Loading: @IsLoading</p>
    <p>Error Message: @(ErrorMessage ?? "None")</p>
    <p>Results Count: @TravelPackages.Count</p>
</div>

@if (IsLoading)
{
    <div class="d-flex justify-content-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Searching for travel options...</span>
        </div>
    </div>
}
else if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-4">
        <h4>Error Searching</h4>
        <p>@ErrorMessage</p>
    </div>
}
else if (hasSearched && !TravelPackages.Any())
{
    <div class="alert alert-info mt-4">
        <h4>No travel packages found</h4>
        <p>We couldn't find any travel packages matching your criteria. Please try changing your search parameters.</p>
        <p><strong>Tip:</strong> Make sure you're using airport codes (like CPH for Copenhagen, BCN for Barcelona, etc.) for best results.</p>
    </div>
}

@if (TravelPackages.Any())
{
    <h3 class="mt-5 mb-4">Available travel packages</h3>
    <div class="row">
        @foreach (var package in TravelPackages)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 package-card">
                    <div class="card-body">
                        <h5 class="card-title">@package.OriginCity to @package.Destination</h5>
                        <div class="mb-2">
                            <span class="text-muted">@package.StartDate.ToString("MMM d") - @package.EndDate.ToString("MMM d")</span>
                            <span class="ms-2 badge bg-info">@package.GetDuration()</span>
                        </div>
                        <p class="card-text mb-1">
                            <i class="bi bi-airplane"></i> @package.Airline
                        </p>
                        <p class="card-text mb-1">
                            <i class="bi bi-building"></i> @package.HotelName
                            <span class="hotel-stars">@package.GetStars()</span>
                        </p>
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="package-price-display">
                                <span class="price-label">Total price</span>
                                <span class="price-value">$@package.GetFormattedPrice()</span>
                            </div>
                            <a href="/package/@package.Id" class="btn btn-primary">View details</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private string Origin { get; set; } = string.Empty;
    private string Destination { get; set; } = string.Empty;
    private DateTime DepartureDate { get; set; } = DateTime.Now.AddDays(7);
    private DateTime ReturnDate { get; set; } = DateTime.Now.AddDays(14);
    private bool IsLoading { get; set; } = false;
    private bool hasSearched { get; set; } = false;
    private string ErrorMessage { get; set; } = null;
    private List<TravelPackageViewModel> TravelPackages { get; set; } = new();

    protected override void OnInitialized()
    {
        // Pre-fill with popular destinations from URL parameters, if available
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("destination", out var destinationValue))
        {
            Destination = destinationValue.ToString();
        }

        Logger.LogInformation("Search page initialized");
    }

    private async Task SearchTravelPackages()
    {
        Logger.LogInformation("Search button clicked");

        // Clear any previous error
        ErrorMessage = null;

        // Validate input
        if (string.IsNullOrWhiteSpace(Origin))
        {
            ErrorMessage = "Please enter a departure city/airport code";
            Logger.LogWarning("Error: Origin is empty");
            return;
        }

        if (string.IsNullOrWhiteSpace(Destination))
        {
            ErrorMessage = "Please enter a destination city/airport code";
            Logger.LogWarning("Error: Destination is empty");
            return;
        }

        if (DepartureDate < DateTime.Now.Date)
        {
            ErrorMessage = "Departure date cannot be in the past";
            Logger.LogWarning("Error: Departure date is in the past");
            return;
        }

        if (ReturnDate <= DepartureDate)
        {
            ErrorMessage = "Return date must be after departure date";
            Logger.LogWarning("Error: Return date is not after departure date");
            return;
        }

        try
        {
            IsLoading = true;
            StateHasChanged(); // Update UI to show loading indicator

            Logger.LogInformation($"Searching for packages: Origin={Origin}, Destination={Destination}, Departure={DepartureDate:yyyy-MM-dd}, Return={ReturnDate:yyyy-MM-dd}");

            // Search for travel packages
            TravelPackages = await TravelPackageService.SearchPackagesAsync(
                Origin.Trim(),
                Destination.Trim(),
                DepartureDate,
                ReturnDate);

            Logger.LogInformation($"Search completed. Found {TravelPackages.Count} packages");

            // Mark that we've performed a search
            hasSearched = true;
        }
        catch (Exception ex)
        {
            // Handle exceptions
            ErrorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError($"Error during search: {ex.Message}");
            Logger.LogError($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Update UI with results or error
        }
    }
}