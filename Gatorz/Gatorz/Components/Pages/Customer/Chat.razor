@page "/customer/chat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using Gatorz.Data
@using Gatorz.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "Customer")]
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Travel Chat - Gatorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Travel Chat</h1>
    <p class="lead">Connect with fellow travelers</p>

    @if (!IsConnected)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> Connecting to chat...
        </div>
    }

    <!-- Simple Destination Chat -->
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h6>Destinations</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @foreach (var dest in popularDestinations)
                        {
                            <button type="button"
                                    class="list-group-item list-group-item-action @(selectedDestination == dest ? "active" : "")"
                                    @onclick="() => JoinDestinationChat(dest)">
                                @dest
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            @if (!string.IsNullOrEmpty(selectedDestination))
            {
                <div class="card">
                    <div class="card-header">
                        <h6>@selectedDestination Chat</h6>
                    </div>
                    <div class="card-body">
                        <!-- Messages -->
                        <div class="mb-3" style="height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
                            @foreach (var msg in messages)
                            {
                                <div class="mb-2">
                                    <small class="text-muted">@msg.Timestamp.ToString("HH:mm")</small>
                                    <strong>@msg.SenderName:</strong>
                                    <span>@msg.Message</span>
                                </div>
                            }
                        </div>

                        <!-- Send Message -->
                        <div class="input-group">
                            <input @bind="messageInput" @onkeypress="HandleKeyPress"
                                   class="form-control" placeholder="Type message..." />
                            <button class="btn btn-primary" @onclick="SendMessage" disabled="@(!IsConnected)">
                                Send
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <h5>Select a destination to start chatting</h5>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new();
    private string messageInput = string.Empty;
    private string selectedDestination = string.Empty;
    private string currentUserId = string.Empty;
    private string currentUserName = string.Empty;

    private readonly List<string> popularDestinations = new()
    {
        "Barcelona", "Rome", "Paris", "London", "Dubai"
    };

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);
            if (currentUser != null)
            {
                currentUserId = currentUser.Id;
                currentUserName = $"{currentUser.FirstName} {currentUser.LastName}";
            }

            // Initialize SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
                .Build();

            // Handle incoming messages
            hubConnection.On<string, string, DateTime>("ReceiveDestinationMessage", (senderName, message, timestamp) =>
            {
                var newMessage = new ChatMessage
                    {
                        SenderName = senderName,
                        Message = message,
                        Destination = selectedDestination,
                        Timestamp = timestamp,
                        MessageType = ChatMessageType.DestinationGroup
                    };
                messages.Add(newMessage);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chat initialization error: {ex.Message}");
        }
    }

    private async Task JoinDestinationChat(string destination)
    {
        if (hubConnection is null) return;

        try
        {
            selectedDestination = destination;
            messages.Clear();

            // Load existing messages for this destination
            var existingMessages = await DbContext.ChatMessages
                .Where(m => m.Destination == destination && m.MessageType == ChatMessageType.DestinationGroup)
                .OrderBy(m => m.Timestamp)
                .Take(50) // Last 50 messages
                .ToListAsync();

            messages.AddRange(existingMessages);

            await hubConnection.SendAsync("JoinDestinationGroup", destination);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining destination chat: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection is null || string.IsNullOrWhiteSpace(messageInput) || string.IsNullOrEmpty(selectedDestination))
            return;

        try
        {
            await hubConnection.SendAsync("SendMessageToDestination", selectedDestination, messageInput);
            messageInput = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}