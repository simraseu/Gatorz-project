@page "/test-amadeus"
@using Gatorz.Services
@using System.Diagnostics
@inject ITokenService TokenService
@rendermode InteractiveServer

<h3>Amadeus API Connection Test</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="TestConnection">Test Amadeus Connection</button>
    <span>Button clicked: @clickCount times</span>
</div>

<div class="mt-3">
    <h4>Debug Log:</h4>
    <pre class="bg-dark text-light p-3" style="max-height: 200px; overflow-y: auto;">@debugLog</pre>
</div>

<div class="mt-3">
    <h4>Results:</h4>
    <div class="p-3 @resultClass">
        <p><strong>Status:</strong> @status</p>
        @if (!string.IsNullOrEmpty(token))
        {
            <p><strong>Token:</strong> @(token.Substring(0, 20))... (truncated)</p>
            <p><strong>Token Length:</strong> @token.Length characters</p>
        }
        @if (errorMessage != null)
        {
            <p><strong>Error:</strong> @errorMessage</p>
            <p><strong>Stack Trace:</strong></p>
            <pre class="bg-light p-2">@stackTrace</pre>
        }
    </div>
</div>

@code {
    private string status = "Not tested";
    private string token = "";
    private string errorMessage = null;
    private string stackTrace = null;
    private string resultClass = "bg-light";
    private int clickCount = 0;
    private string debugLog = "Debug log initialized\n";

    private async Task TestConnection()
    {
        try
        {
            clickCount++;
            AppendLog("Button clicked");
            status = "Testing connection...";
            token = "";
            errorMessage = null;
            stackTrace = null;
            resultClass = "bg-light";
            StateHasChanged();

            AppendLog("TestConnection started");
            AppendLog("Getting token...");

            // Try to get a token
            token = await TokenService.GetTokenAsync();
            AppendLog($"GetTokenAsync completed, token length: {(token?.Length ?? 0)}");

            if (!string.IsNullOrEmpty(token))
            {
                status = "Connection successful";
                resultClass = "bg-success text-white";
                AppendLog("Token successfully retrieved");
            }
            else
            {
                status = "Failed to get token";
                resultClass = "bg-danger text-white";
                AppendLog("Token was empty or null");
            }
        }
        catch (Exception ex)
        {
            status = "Error connecting to Amadeus";
            errorMessage = ex.Message;
            stackTrace = ex.StackTrace;
            resultClass = "bg-danger text-white";
            AppendLog($"Exception: {ex.Message}");
            AppendLog($"Stack trace: {ex.StackTrace}");
        }
    }

    private void AppendLog(string message)
    {
        // Add timestamp to log message
        string timestampedMessage = $"[{DateTime.Now:HH:mm:ss.fff}] {message}\n";
        debugLog += timestampedMessage;

        // Keep log from getting too long
        if (debugLog.Length > 5000)
        {
            debugLog = debugLog.Substring(debugLog.Length - 5000);
        }

        Console.WriteLine(message); // Also write to server console
    }
}