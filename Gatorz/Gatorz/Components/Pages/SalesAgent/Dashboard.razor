@page "/sales/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Gatorz.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "SalesAgent,Admin")]
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Sales Agent Dashboard - Gatorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Sales Agent Dashboard</h1>
    <p class="lead">Welcome @agentName! Manage customer bookings and handle support requests from here.</p>

    <div class="row mb-4">
        <!-- Stats Cards -->
        <div class="col-md-3 mb-4">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Total Bookings</h5>
                    <h2 class="mt-3 mb-0">@totalBookings</h2>
                    <p class="card-text mt-3">Active bookings in the system</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">New Bookings</h5>
                    <h2 class="mt-3 mb-0">@newBookings</h2>
                    <p class="card-text mt-3">Bookings in the last 7 days</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Pending Support</h5>
                    <h2 class="mt-3 mb-0">@pendingSupport</h2>
                    <p class="card-text mt-3">Customer inquiries waiting</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Revenue</h5>
                    <h2 class="mt-3 mb-0">$@revenueFormatted</h2>
                    <p class="card-text mt-3">Total booking revenue</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Recent Bookings -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Recent Bookings</h5>
                </div>
                <div class="card-body">
                    @if (recentBookings.Any())
                    {
                        <div class="list-group mb-3">
                            @foreach (var booking in recentBookings)
                            {
                                <a href="/sales/booking/@booking.Id" class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">
                                            Booking #@booking.Id - @GetDestinationName(booking)
                                        </h6>
                                        <small class="text-@GetStatusColor(booking.Status)">@booking.Status</small>
                                    </div>
                                    <p class="mb-1">Customer: @booking.UserId</p>
                                    <small class="text-muted">Booked: @booking.BookingDate.ToString("MMM d, yyyy") - $@booking.TotalPrice.ToString("N2")</small>
                                </a>
                            }
                        </div>
                        <a href="/sales/bookings" class="btn btn-primary">View All Bookings</a>
                    }
                    else
                    {
                        <p>No recent bookings found.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Customer Inquiries -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Customer Inquiries</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Recent customer inquiries and support requests.</p>

                    @if (mockInquiries.Any())
                    {
                        <div class="list-group mb-3">
                            @foreach (var inquiry in mockInquiries)
                            {
                                <a href="#" class="list-group-item list-group-item-action" @onclick="() => ShowInquiryModal(inquiry)">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@inquiry.Subject</h6>
                                        <small class="@(inquiry.IsUrgent ? "text-danger" : "text-muted")">
                                            @(inquiry.IsUrgent ? "Urgent" : inquiry.SubmittedDate.ToString("MMM d"))
                                        </small>
                                    </div>
                                    <p class="mb-1">From: @inquiry.CustomerName</p>
                                    <small class="text-muted">@(inquiry.Message.Length > 60 ? inquiry.Message.Substring(0, 60) + "..." : inquiry.Message)</small>
                                </a>
                            }
                        </div>
                        <a href="/sales/inquiries" class="btn btn-primary">View All Inquiries</a>
                    }
                    else
                    {
                        <p>No pending customer inquiries.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Quick Actions -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/sales/bookings/search" class="btn btn-outline-primary">Search Customer Bookings</a>
                        <a href="/sales/bookings/create" class="btn btn-outline-primary">Create New Booking</a>
                        <a href="/sales/notifications" class="btn btn-outline-primary">Send Customer Notification</a>
                        <a href="/sales/reports" class="btn btn-outline-primary">Generate Reports</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Travel Package Stats -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Popular Destinations</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Most popular destinations this month.</p>
                    <div class="list-group">
                        @foreach (var destination in popularDestinations)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@destination.Name</h6>
                                    <span class="badge bg-primary rounded-pill">@destination.BookingCount</span>
                                </div>
                                <small class="text-muted">Average price: $@destination.AveragePrice.ToString("N0")</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (selectedInquiry != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Customer Inquiry</h5>
                    <button type="button" class="btn-close" @onclick="CloseInquiryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">From:</label>
                        <p>@selectedInquiry.CustomerName (@selectedInquiry.CustomerEmail)</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Subject:</label>
                        <p>@selectedInquiry.Subject</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Message:</label>
                        <p>@selectedInquiry.Message</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Submitted:</label>
                        <p>@selectedInquiry.SubmittedDate.ToString("MMMM d, yyyy HH:mm")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Reply:</label>
                        <textarea class="form-control" rows="3" placeholder="Type your response here..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseInquiryModal">Close</button>
                    <button type="button" class="btn btn-primary">Send Reply</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string agentName = "Agent";
    private int totalBookings = 0;
    private int newBookings = 0;
    private int pendingSupport = 0;
    private decimal totalRevenue = 0;
    private string revenueFormatted => totalRevenue.ToString("N0");
    private List<Booking> recentBookings = new List<Booking>();

    // Mock customer inquiry class (this would be a real model in your application)
    private class CustomerInquiry
    {
        public int Id { get; set; }
        public string CustomerName { get; set; }
        public string CustomerEmail { get; set; }
        public string Subject { get; set; }
        public string Message { get; set; }
        public DateTime SubmittedDate { get; set; }
        public bool IsUrgent { get; set; }
    }

    private List<CustomerInquiry> mockInquiries = new List<CustomerInquiry>();
    private CustomerInquiry selectedInquiry;

    private class DestinationStat
    {
        public string Name { get; set; }
        public int BookingCount { get; set; }
        public decimal AveragePrice { get; set; }
    }

    private List<DestinationStat> popularDestinations = new List<DestinationStat>();

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            agentName = $"{user.FirstName} {user.LastName}";
        }

        try
        {
            // Load actual booking data
            totalBookings = await DbContext.Bookings.CountAsync();
            newBookings = await DbContext.Bookings
                .Where(b => b.BookingDate >= DateTime.Now.AddDays(-7))
                .CountAsync();

            // Load recent bookings
            recentBookings = await DbContext.Bookings
                .Include(b => b.TravelPackages)
                .OrderByDescending(b => b.BookingDate)
                .Take(5)
                .ToListAsync();

            // Calculate total revenue
            totalRevenue = await DbContext.Bookings.SumAsync(b => b.TotalPrice);
        }
        catch (Exception)
        {
            // In case of database errors, we'll use mock data
            totalBookings = 125;
            newBookings = 17;

            // Create some mock bookings if none were loaded
            if (!recentBookings.Any())
            {
                recentBookings = CreateMockBookings();
            }

            totalRevenue = 245750;
        }

        // Load mock customer inquiries (in a real app, this would be from the database)
        mockInquiries = CreateMockInquiries();
        pendingSupport = mockInquiries.Count;

        // Create mock destination stats (in a real app, this would be from the database)
        popularDestinations = CreateMockDestinationStats();
    }

    private string GetDestinationName(Booking booking)
    {
        if (booking?.TravelPackages == null || !booking.TravelPackages.Any())
            return "Unknown Destination";

        // If there are multiple destinations, list them
        if (booking.TravelPackages.Count > 1)
        {
            return $"{booking.TravelPackages.First().Destination} + {booking.TravelPackages.Count - 1} more";
        }

        return booking.TravelPackages.First().Destination;
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "success",
            "pending" => "warning",
            "cancelled" => "danger",
            _ => "secondary"
        };
    }

    private void ShowInquiryModal(CustomerInquiry inquiry)
    {
        selectedInquiry = inquiry;
    }

    private void CloseInquiryModal()
    {
        selectedInquiry = null;
    }

    // Method to create mock bookings for preview
    private List<Booking> CreateMockBookings()
    {
        return new List<Booking>
        {
            new Booking {
                Id = 1001,
                UserId = 101,
                BookingDate = DateTime.Now.AddDays(-2),
                TotalPrice = 2499,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Barcelona" }
                }
            },
            new Booking {
                Id = 1002,
                UserId = 102,
                BookingDate = DateTime.Now.AddDays(-3),
                TotalPrice = 3299,
                Status = "Pending",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Rome" }
                }
            },
            new Booking {
                Id = 1003,
                UserId = 103,
                BookingDate = DateTime.Now.AddDays(-5),
                TotalPrice = 4850,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Dubai" }
                }
            },
            new Booking {
                Id = 1004,
                UserId = 104,
                BookingDate = DateTime.Now.AddDays(-1),
                TotalPrice = 1899,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Paris" }
                }
            },
            new Booking {
                Id = 1005,
                UserId = 105,
                BookingDate = DateTime.Now.AddDays(-7),
                TotalPrice = 2750,
                Status = "Cancelled",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "London" }
                }
            }
        };
    }

    // Method to create mock customer inquiries
    private List<CustomerInquiry> CreateMockInquiries()
    {
        return new List<CustomerInquiry>
        {
            new CustomerInquiry {
                Id = 1,
                CustomerName = "John Smith",
                CustomerEmail = "john.smith@example.com",
                Subject = "Booking Modification Request",
                Message = "I need to change my flight date from July 10 to July 15. Is this possible and what would be the additional cost?",
                SubmittedDate = DateTime.Now.AddHours(-5),
                IsUrgent = true
            },
            new CustomerInquiry {
                Id = 2,
                CustomerName = "Sarah Johnson",
                CustomerEmail = "sarah.j@example.com",
                Subject = "Special Request for Hotel",
                Message = "I have booked the Rome package and would like to request a room with a view if possible.",
                SubmittedDate = DateTime.Now.AddDays(-1),
                IsUrgent = false
            },
            new CustomerInquiry {
                Id = 3,
                CustomerName = "Michael Rodriguez",
                CustomerEmail = "miker@example.com",
                Subject = "Cancellation Policy",
                Message = "Could you please explain the cancellation policy for my Barcelona trip? I might need to cancel due to work commitments.",
                SubmittedDate = DateTime.Now.AddDays(-2),
                IsUrgent = false
            },
            new CustomerInquiry {
                Id = 4,
                CustomerName = "Emma Wilson",
                CustomerEmail = "emma.w@example.com",
                Subject = "Airport Transfer Question",
                Message = "Does my Dubai package include airport transfers? If not, how can I add this service?",
                SubmittedDate = DateTime.Now.AddDays(-3),
                IsUrgent = false
            }
        };
    }

    // Method to create mock destination statistics
    private List<DestinationStat> CreateMockDestinationStats()
    {
        return new List<DestinationStat>
        {
            new DestinationStat { Name = "Barcelona", BookingCount = 28, AveragePrice = 2350 },
            new DestinationStat { Name = "Rome", BookingCount = 22, AveragePrice = 2780 },
            new DestinationStat { Name = "Dubai", BookingCount = 18, AveragePrice = 3950 },
            new DestinationStat { Name = "Paris", BookingCount = 15, AveragePrice = 2480 },
            new DestinationStat { Name = "London", BookingCount = 12, AveragePrice = 2150 }
        };
    }
}