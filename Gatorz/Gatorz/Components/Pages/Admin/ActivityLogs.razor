@page "/admin/activity"
@using Microsoft.AspNetCore.Authorization
@using Gatorz.Services
@using Gatorz.Models
@attribute [Authorize(Roles = "Admin")]
@inject IActivityLogService ActivityLogService
@rendermode InteractiveServer

<PageTitle>Activity Logs - Gatorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Activity Logs</h1>
    <p class="lead">Monitor user activities and system access</p>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by user, action, or details..."
                       @bind="searchTerm" @bind:event="oninput" />
                <button class="btn btn-primary" @onclick="SearchLogs">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedAction">
                <option value="">All Actions</option>
                <option value="User Login">User Login</option>
                <option value="User Logout">User Logout</option>
                <option value="Booking Created">Booking Created</option>
                <option value="Travel Search">Travel Search</option>
                <option value="Admin Access">Admin Access</option>
                <option value="Role Changed">Role Changed</option>
            </select>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-secondary" @onclick="RefreshLogs">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
            <button class="btn btn-outline-danger ms-2" @onclick="ShowClearConfirmation">
                <i class="bi bi-trash"></i> Clear Old Logs
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5>Total Activities</h5>
                    <h2>@totalActivities</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5>Today's Activities</h5>
                    <h2>@todayActivities</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5>Unique Users (24h)</h5>
                    <h2>@uniqueUsersToday</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <h5>Login Attempts</h5>
                    <h2>@loginAttempts</h2>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!activityLogs.Any())
    {
        <div class="alert alert-info">
            <h4>No Activity Logs Found</h4>
            <p>No activities match your search criteria, or no activities have been logged yet.</p>
        </div>
    }
    else
    {
        <!-- Activity Table -->
        <div class="card">
            <div class="card-header">
                <h5>Activity History (@activityLogs.Count results)</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Timestamp</th>
                                <th>User</th>
                                <th>Action</th>
                                <th>Details</th>
                                <th>IP Address</th>
                                <th>User Agent</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in activityLogs)
                            {
                                <tr class="@GetRowClass(log.Action)">
                                    <td>
                                        @log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")
                                        <br />
                                        <small class="text-muted">@GetTimeAgo(log.Timestamp)</small>
                                    </td>
                                    <td>
                                        <strong>@log.UserName</strong>
                                        <br />
                                        <small class="text-muted">@log.UserId</small>
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetActionColor(log.Action)">
                                            @log.Action
                                        </span>
                                    </td>
                                    <td>@log.Details</td>
                                    <td>
                                        <code>@log.IPAddress</code>
                                    </td>
                                    <td>
                                        <small>@TruncateUserAgent(log.UserAgent)</small>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <nav class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                </li>

                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                </li>
            </ul>
        </nav>
    }
</div>

<!-- Clear Confirmation Modal -->
@if (showClearConfirmation)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Clear Old Activity Logs</h5>
                    <button type="button" class="btn-close" @onclick="() => showClearConfirmation = false"></button>
                </div>
                <div class="modal-body">
                    <p>This will permanently delete activity logs older than 90 days.</p>
                    <p><strong>This action cannot be undone.</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showClearConfirmation = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ClearOldLogs">Clear Old Logs</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<ActivityLog> activityLogs = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedAction = "";
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalPages = 1;
    private bool showClearConfirmation = false;

    // Statistics
    private int totalActivities = 0;
    private int todayActivities = 0;
    private int uniqueUsersToday = 0;
    private int loginAttempts = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadActivityLogs();
        await LoadStatistics();
    }

    private async Task LoadActivityLogs()
    {
        isLoading = true;

        try
        {
            var skip = (currentPage - 1) * pageSize;

            if (!string.IsNullOrWhiteSpace(searchTerm) || !string.IsNullOrWhiteSpace(selectedAction))
            {
                // Search functionality
                activityLogs = await ActivityLogService.SearchActivityLogsAsync(searchTerm, skip, pageSize);
            }
            else
            {
                activityLogs = await ActivityLogService.GetActivityLogsAsync(skip, pageSize);
            }

            // Calculate total pages
            totalActivities = await ActivityLogService.GetTotalActivityCountAsync();
            totalPages = (int)Math.Ceiling(totalActivities / (double)pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading activity logs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            var allLogs = await ActivityLogService.GetActivityLogsAsync(0, 1000); // Get recent logs for stats

            totalActivities = allLogs.Count;
            todayActivities = allLogs.Count(l => l.Timestamp.Date == DateTime.UtcNow.Date);
            uniqueUsersToday = allLogs.Where(l => l.Timestamp.Date == DateTime.UtcNow.Date)
                                     .Select(l => l.UserId)
                                     .Distinct()
                                     .Count();
            loginAttempts = allLogs.Count(l => l.Action.Contains("Login") && l.Timestamp.Date == DateTime.UtcNow.Date);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task SearchLogs()
    {
        currentPage = 1;
        await LoadActivityLogs();
    }

    private async Task RefreshLogs()
    {
        await LoadActivityLogs();
        await LoadStatistics();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadActivityLogs();
        }
    }

    private void ShowClearConfirmation()
    {
        showClearConfirmation = true;
    }

    private async Task ClearOldLogs()
    {
        // This would delete old logs - implement if needed
        showClearConfirmation = false;
        await RefreshLogs();
    }

    private string GetRowClass(string action)
    {
        return action.ToLower() switch
        {
            var a when a.Contains("login") => "table-success",
            var a when a.Contains("logout") => "table-info",
            var a when a.Contains("error") => "table-danger",
            var a when a.Contains("admin") => "table-warning",
            _ => ""
        };
    }

    private string GetActionColor(string action)
    {
        return action.ToLower() switch
        {
            var a when a.Contains("login") => "success",
            var a when a.Contains("logout") => "info",
            var a when a.Contains("booking") => "primary",
            var a when a.Contains("search") => "secondary",
            var a when a.Contains("admin") => "warning",
            var a when a.Contains("error") => "danger",
            _ => "light"
        };
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;

        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";

        return timestamp.ToString("MMM d");
    }

    private string TruncateUserAgent(string userAgent)
    {
        if (string.IsNullOrEmpty(userAgent)) return "Unknown";

        // Extract browser name from user agent
        if (userAgent.Contains("Chrome")) return "Chrome";
        if (userAgent.Contains("Firefox")) return "Firefox";
        if (userAgent.Contains("Safari")) return "Safari";
        if (userAgent.Contains("Edge")) return "Edge";

        return userAgent.Length > 30 ? userAgent.Substring(0, 30) + "..." : userAgent;
    }
}