@page "/admin/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Gatorz.Services
@using Gatorz.Data
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext DbContext
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin Dashboard - Gatorz</PageTitle>

<div class="container-fluid py-4">
    <h1 class="mb-4">Admin Dashboard</h1>
    <p class="lead">Welcome to the administrator dashboard. From here you can manage the entire system.</p>

    <div class="row mb-4">
        <!-- Stats Cards -->
        <div class="col-md-3 mb-4">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Total Users</h5>
                    <h2 class="mt-3 mb-0">@UserCount</h2>
                    <p class="card-text mt-3">Registered users in the system</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Total Bookings</h5>
                    <h2 class="mt-3 mb-0">@BookingsCount</h2>
                    <p class="card-text mt-3">Completed bookings</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Packages</h5>
                    <h2 class="mt-3 mb-0">@PackagesCount</h2>
                    <p class="card-text mt-3">Available travel packages</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Revenue</h5>
                    <h2 class="mt-3 mb-0">$@RevenueFormatted</h2>
                    <p class="card-text mt-3">Total booking revenue</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- User Management -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">User Management</h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <p>Manage users, assign roles, and handle account issues.</p>
                    <ul class="list-group mb-3">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Customers
                            <span class="badge bg-primary rounded-pill">@CustomerCount</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Sales Agents
                            <span class="badge bg-primary rounded-pill">@SalesAgentCount</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Administrators
                            <span class="badge bg-primary rounded-pill">@AdminCount</span>
                        </li>
                    </ul>
                    <a href="/admin/users" class="btn btn-primary mt-auto">Manage Users</a>
                </div>
            </div>
        </div>
        <!-- Activity Monitoring -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Activity Monitoring</h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <p>Monitor user activities, logins, and security events for audit trails and compliance.</p>
                    <div class="mt-auto">
                        <a href="/admin/activity" class="btn btn-primary w-100">View Activity Log</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bookings -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Bookings</h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <p>View and manage all customer bookings.</p>
                    <ul class="list-group mb-3">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Confirmed
                            <span class="badge bg-success rounded-pill">@ConfirmedBookingsCount</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Pending
                            <span class="badge bg-warning rounded-pill">@PendingBookingsCount</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Cancelled
                            <span class="badge bg-danger rounded-pill">@CancelledBookingsCount</span>
                        </li>
                    </ul>
                    <a href="/admin/bookings" class="btn btn-primary mt-auto">Manage Bookings</a>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Travel Packages</h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <p>Create, edit, and manage travel packages.</p>
                    <div class="list-group mb-3">
                        @if (RecentDestinations.Any())
                        {
                            @foreach (var destination in RecentDestinations)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@destination</h6>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="list-group-item">No packages available</div>
                        }
                    </div>
                    <a href="/admin/packages" class="btn btn-primary mt-auto">Manage Packages</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int UserCount { get; set; }
    private int CustomerCount { get; set; }
    private int SalesAgentCount { get; set; }
    private int AdminCount { get; set; }
    private int BookingsCount { get; set; }
    private int ConfirmedBookingsCount { get; set; }
    private int PendingBookingsCount { get; set; }
    private int CancelledBookingsCount { get; set; }
    private int PackagesCount { get; set; }
    private decimal TotalRevenue { get; set; }
    private int TodayLoginCount;
    private int TodayFailedLoginCount;
    private int TotalActivityCount;
    private int Last24HoursActivityCount;
    private string RevenueFormatted => TotalRevenue.ToString("N0");
    private List<string> RecentDestinations { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Count users
        UserCount = UserManager.Users.Count();

        // Count users by role
        var customerRole = await RoleManager.FindByNameAsync("Customer");
        var salesAgentRole = await RoleManager.FindByNameAsync("SalesAgent");
        var adminRole = await RoleManager.FindByNameAsync("Admin");
      

        if (customerRole != null)
        {
            var customerUsers = await UserManager.GetUsersInRoleAsync(customerRole.Name);
            CustomerCount = customerUsers.Count;
        }

        if (salesAgentRole != null)
        {
            var salesAgentUsers = await UserManager.GetUsersInRoleAsync(salesAgentRole.Name);
            SalesAgentCount = salesAgentUsers.Count;
        }

        if (adminRole != null)
        {
            var adminUsers = await UserManager.GetUsersInRoleAsync(adminRole.Name);
            AdminCount = adminUsers.Count;
        }

        // Count bookings
        BookingsCount = DbContext.Bookings.Count();
        ConfirmedBookingsCount = DbContext.Bookings.Count(b => b.Status == "Confirmed");
        PendingBookingsCount = DbContext.Bookings.Count(b => b.Status == "Pending");
        CancelledBookingsCount = DbContext.Bookings.Count(b => b.Status == "Cancelled");

        // Count packages
        PackagesCount = DbContext.TravelPackages.Count();

        // Calculate total revenue
        TotalRevenue = DbContext.Bookings.Sum(b => b.TotalPrice);

        // Get recent destinations
        RecentDestinations = await DbContext.TravelPackages
            .OrderByDescending(p => p.Id)
            .Select(p => p.Destination)
            .Distinct()
            .Take(5)
            .ToListAsync();
    }

}