@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Gotorz</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="search">
                <span class="bi bi-search-nav-menu" aria-hidden="true"></span> Search Travel
            </NavLink>
        </div>

        @if (isAuthenticated)
        {
           
            @if (isAdmin)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="admin/dashboard">
                        <span class="bi bi-speedometer-nav-menu" aria-hidden="true"></span> Admin Dashboard
                    </NavLink>
                </div>
            }

            @if (isSalesAgent)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sales/dashboard">
                        <span class="bi bi-speedometer2" aria-hidden="true"></span> Sales Dashboard
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sales/bookings">
                        <span class="bi bi-calendar-check" aria-hidden="true"></span> Bookings
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sales/inquiries">
                        <span class="bi bi-chat-dots" aria-hidden="true"></span> Customer Inquiries
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sales/notifications">
                        <span class="bi bi-bell" aria-hidden="true"></span> Notifications
                    </NavLink>
                </div>
            }

            @if (isCustomer)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="customer/dashboard">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> My Account
                    </NavLink>
                </div>
            }

            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="returnUrl" value="" />
                    <button type="submit" class="nav-link" style="border:none; background:none; width:100%; text-align:left;">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Login">
                    <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Register">
                    <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private string? currentUrl;
    private bool isAuthenticated;
    private bool isAdmin;
    private bool isSalesAgent;
    private bool isCustomer;
    private string firstName = "";

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Subscribe to authentication state changes
        AuthenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;

        // Get initial authentication state
        GetAuthenticationStateAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        await GetAuthenticationStateAsync();
    }

    private async Task GetAuthenticationStateAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        isAdmin = user.IsInRole("Admin");
        isSalesAgent = user.IsInRole("SalesAgent");
        isCustomer = user.IsInRole("Customer");

        if (isAuthenticated)
        {
            // Try to get the user's claims
            var firstNameClaim = user.FindFirst("FirstName");
            if (firstNameClaim != null)
            {
                firstName = firstNameClaim.Value;
            }
            else
            {
                // If FirstName claim doesn't exist, try to get from Identity
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    // We could try to load the user from database here
                    // For now, just use a generic name
                    firstName = "User";
                }
            }
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
    }
}