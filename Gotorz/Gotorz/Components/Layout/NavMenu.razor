@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Gotorz</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="bi bi-house-door"></i> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="search">
                <i class="bi bi-search"></i> Search Travel
            </NavLink>
        </div>

        @if (isAuthenticated)
        {
            @if (isAdmin)
            {
                <div class="nav-item px-3">
                    <div class="nav-item-header" @onclick="() => ToggleSubmenu(AdminSubmenuId)">
                        <i class="bi bi-speedometer2"></i> Admin
                        <i class="bi @(IsSubmenuExpanded(AdminSubmenuId) ? "bi-chevron-down" : "bi-chevron-right") ms-auto"></i>
                    </div>

                    <div class="submenu @(IsSubmenuExpanded(AdminSubmenuId) ? "expanded" : "")">
                        <NavLink class="nav-link" href="admin/dashboard">
                            <i class="bi bi-speedometer2"></i> Dashboard
                        </NavLink>
                        <NavLink class="nav-link" href="admin/users">
                            <i class="bi bi-people"></i> Users
                        </NavLink>
                        <NavLink class="nav-link" href="admin/bookings">
                            <i class="bi bi-calendar-check"></i> Bookings
                        </NavLink>
                        <NavLink class="nav-link" href="admin/packages">
                            <i class="bi bi-box"></i> Packages
                        </NavLink>
                        <NavLink class="nav-link" href="admin/reports">
                            <i class="bi bi-graph-up"></i> Reports
                        </NavLink>
                    </div>
                </div>
            }

            @if (isSalesAgent)
            {
                <div class="nav-item px-3">
                    <div class="nav-item-header" @onclick="() => ToggleSubmenu(SalesSubmenuId)">
                        <i class="bi bi-briefcase"></i> Sales
                        <i class="bi @(IsSubmenuExpanded(SalesSubmenuId) ? "bi-chevron-down" : "bi-chevron-right") ms-auto"></i>
                    </div>

                    <div class="submenu @(IsSubmenuExpanded(SalesSubmenuId) ? "expanded" : "")">
                        <NavLink class="nav-link" href="sales/dashboard">
                            <i class="bi bi-speedometer2"></i> Dashboard
                        </NavLink>
                        <NavLink class="nav-link" href="sales/bookings">
                            <i class="bi bi-calendar-check"></i> Bookings
                        </NavLink>
                        <NavLink class="nav-link" href="sales/inquiries">
                            <i class="bi bi-chat-dots"></i> Inquiries
                        </NavLink>
                        <NavLink class="nav-link" href="sales/notifications">
                            <i class="bi bi-bell"></i> Notifications
                        </NavLink>
                    </div>
                </div>
            }

            @if (isCustomer)
            {
                <div class="nav-item px-3">
                    <div class="nav-item-header" @onclick="() => ToggleSubmenu(CustomerSubmenuId)">
                        <i class="bi bi-person"></i> My Account
                        <i class="bi @(IsSubmenuExpanded(CustomerSubmenuId) ? "bi-chevron-down" : "bi-chevron-right") ms-auto"></i>
                    </div>

                    <div class="submenu @(IsSubmenuExpanded(CustomerSubmenuId) ? "expanded" : "")">
                        <NavLink class="nav-link" href="customer/dashboard">
                            <i class="bi bi-columns-gap"></i> Dashboard
                        </NavLink>
                        <NavLink class="nav-link" href="customer/bookings">
                            <i class="bi bi-calendar-check"></i> My Bookings
                        </NavLink>
                        <NavLink class="nav-link" href="Account/Manage">
                            <i class="bi bi-gear"></i> Profile Settings
                        </NavLink>
                    </div>
                </div>
            }

            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="returnUrl" value="" />
                    <button type="submit" class="nav-link" style="border:none; background:none; width:100%; text-align:left;">
                        <i class="bi bi-box-arrow-left"></i> Logout
                    </button>
                </form>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Login">
                    <i class="bi bi-lock"></i> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Register">
                    <i class="bi bi-person-plus"></i> Register
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private const string AdminSubmenuId = "admin";
    private const string SalesSubmenuId = "sales";
    private const string CustomerSubmenuId = "customer";

    private string? currentUrl;
    private bool isAuthenticated;
    private bool isAdmin;
    private bool isSalesAgent;
    private bool isCustomer;
    private string firstName = "";
    private bool collapseNavMenu = true;

    // Submenu states using a dictionary for better management
    private Dictionary<string, bool> expandedSubmenus = new Dictionary<string, bool>();

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Subscribe to authentication state changes
        AuthenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;

        // Get initial authentication state
        GetAuthenticationStateAsync();

        // Initialize submenu states
        expandedSubmenus[AdminSubmenuId] = false;
        expandedSubmenus[SalesSubmenuId] = false;
        expandedSubmenus[CustomerSubmenuId] = false;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        await GetAuthenticationStateAsync();
    }

    private async Task GetAuthenticationStateAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        isAdmin = user.IsInRole("Admin");
        isSalesAgent = user.IsInRole("SalesAgent");
        isCustomer = user.IsInRole("Customer");

        if (isAuthenticated)
        {
            // Try to get the user's claims
            var firstNameClaim = user.FindFirst("FirstName");
            if (firstNameClaim != null)
            {
                firstName = firstNameClaim.Value;
            }
            else
            {
                // If FirstName claim doesn't exist, try to get from Identity
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    // We could try to load the user from database here
                    // For now, just use a generic name
                    firstName = "User";
                }
            }
        }

        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    // Submenu management methods
    private void ToggleSubmenu(string submenuId)
    {
        if (expandedSubmenus.ContainsKey(submenuId))
        {
            expandedSubmenus[submenuId] = !expandedSubmenus[submenuId];
            StateHasChanged();
        }
    }

    private bool IsSubmenuExpanded(string submenuId)
    {
        return expandedSubmenus.ContainsKey(submenuId) && expandedSubmenus[submenuId];
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
    }
}