@page "/sales/inquiries"
@page "/sales/inquiries/{InquiryIdParam:int?}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Gotorz.Data
@using Gotorz.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "SalesAgent,Admin")]
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Customer Inquiries - Gotorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Customer Inquiries</h1>
    <p class="lead">Manage and respond to customer inquiries and support requests</p>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by customer name or subject"
                       @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-primary" type="button" @onclick="ApplyFilters">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="statusFilter" @bind:after="ApplyFilters">
                <option value="">All Statuses</option>
                <option value="Open">Open</option>
                <option value="InProgress">In Progress</option>
                <option value="Resolved">Resolved</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="priorityFilter" @bind:after="ApplyFilters">
                <option value="">All Priorities</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h5 class="card-title">Total Inquiries</h5>
                    <h2>@filteredInquiries.Count</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <h5 class="card-title">High Priority</h5>
                    <h2>@filteredInquiries.Count(i => i.Priority == "High")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <h5 class="card-title">Pending Response</h5>
                    <h2>@filteredInquiries.Count(i => i.Status == "Open")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Resolved Today</h5>
                    <h2>@filteredInquiries.Count(i => i.Status == "Resolved" && i.LastUpdated.Date == DateTime.Today)</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Inquiries Table -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading inquiries...</span>
            </div>
            <p class="mt-2">Loading customer inquiries...</p>
        </div>
    }
    else if (!filteredInquiries.Any())
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-chat-square-text fs-1"></i>
            <h4>No inquiries found</h4>
            @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(statusFilter) && string.IsNullOrEmpty(priorityFilter))
            {
                <p>No customer inquiries have been submitted yet.</p>
                <a href="/customer/support" class="btn btn-outline-primary">Test: Submit New Inquiry</a>
            }
            else
            {
                <p>No inquiries match your current filters.</p>
                <button class="btn btn-outline-primary" @onclick="ClearFilters">Clear Filters</button>
            }
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Customer</th>
                        <th>Subject</th>
                        <th>Category</th>
                        <th>Received</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Booking</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var inquiry in filteredInquiries)
                    {
                        <tr class="@(inquiry.Priority == "High" ? "table-warning" : "")">
                            <td>@inquiry.Id</td>
                            <td>
                                <div>
                                    <strong>@inquiry.CustomerName</strong>
                                    <br />
                                    <small class="text-muted">@inquiry.CustomerEmail</small>
                                </div>
                            </td>
                            <td>
                                <div style="max-width: 200px;">
                                    @(inquiry.Subject.Length > 40 ? inquiry.Subject.Substring(0, 40) + "..." : inquiry.Subject)
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-secondary">@inquiry.Category</span>
                            </td>
                            <td>
                                @inquiry.SubmittedDate.ToString("MM/dd/yyyy")
                                <br />
                                <small class="text-muted">@inquiry.SubmittedDate.ToString("HH:mm")</small>
                            </td>
                            <td>
                                <span class="badge bg-@GetStatusColor(inquiry.Status)">
                                    @GetStatusDisplay(inquiry.Status)
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-@GetPriorityColor(inquiry.Priority)">
                                    @inquiry.Priority
                                    @if (inquiry.Priority == "High")
                                    {
                                        <i class="bi bi-exclamation-triangle"></i>
                                    }
                                </span>
                            </td>
                            <td>
                                @if (inquiry.BookingId.HasValue)
                                {
                                    <span class="badge bg-info">#@inquiry.BookingId</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-primary" @onclick="() => ShowInquiryDetails(inquiry)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    @if (inquiry.Status != "Resolved")
                                    {
                                        <div class="btn-group">
                                            @if (inquiry.Status == "Open")
                                            {
                                                <button class="btn btn-sm btn-success" @onclick="() => MarkInProgress(inquiry)" title="Mark In Progress">
                                                    <i class="bi bi-play-circle"></i>
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-primary" @onclick="() => MarkResolved(inquiry)" title="Mark Resolved">
                                                <i class="bi bi-check-circle"></i>
                                            </button>
                                            <button class="btn btn-sm btn-warning" @onclick="() => SetHighPriority(inquiry)" title="Set High Priority">
                                                <i class="bi bi-exclamation-triangle"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Inquiry Details Modal -->
@if (selectedInquiry != null && showDetailsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-chat-square-text"></i> Inquiry #@selectedInquiry.Id Details
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <!-- Replace the modal body in your Inquiries.razor -->
                    <div class="modal-body">
                        <!-- Customer Information -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6><i class="bi bi-person"></i> Customer Information</h6>
                                <p><strong>Name:</strong> @selectedInquiry.CustomerName</p>
                                <p><strong>Email:</strong> @selectedInquiry.CustomerEmail</p>
                                @if (selectedInquiry.BookingId.HasValue)
                                {
                                    <p><strong>Related Booking:</strong> #@selectedInquiry.BookingId</p>
                                }
                            </div>
                            <div class="col-md-6">
                                <h6><i class="bi bi-info-circle"></i> Inquiry Details</h6>
                                <p><strong>Category:</strong> <span class="badge bg-secondary">@selectedInquiry.Category</span></p>
                                <p><strong>Priority:</strong> <span class="badge bg-@GetPriorityColor(selectedInquiry.Priority)">@selectedInquiry.Priority</span></p>
                                <p><strong>Status:</strong> <span class="badge bg-@GetStatusColor(selectedInquiry.Status)">@GetStatusDisplay(selectedInquiry.Status)</span></p>
                                <p><strong>Submitted:</strong> @selectedInquiry.SubmittedDate.ToString("MMMM d, yyyy 'at' h:mm tt")</p>
                            </div>
                        </div>

                        <!-- Original Customer Message -->
                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="bi bi-envelope"></i> @selectedInquiry.Subject</h6>
                            </div>
                            <div class="card-body">
                                <p style="white-space: pre-wrap;">@selectedInquiry.Message</p>
                            </div>
                        </div>

                        <!-- Agent Reply Section (NEW) -->
                        @if (!string.IsNullOrEmpty(selectedInquiry.AgentReply))
                        {
                            <div class="card mb-4 border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">
                                        <i class="bi bi-reply"></i> Agent Reply
                                        @if (!string.IsNullOrEmpty(selectedInquiry.RepliedBy))
                                        {
                                            <small class="ms-2">by @selectedInquiry.RepliedBy</small>
                                        }
                                        @if (selectedInquiry.ReplyDate.HasValue)
                                        {
                                            <small class="ms-2">on @selectedInquiry.ReplyDate.Value.ToString("MMM d, yyyy HH:mm")</small>
                                        }
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p style="white-space: pre-wrap;">@selectedInquiry.AgentReply</p>
                                </div>
                            </div>
                        }

                        <!-- Reply Input Section (NEW) -->
                        @if (selectedInquiry.Status != "Resolved")
                        {
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-chat-dots"></i>
                                        @(string.IsNullOrEmpty(selectedInquiry.AgentReply) ? "Send Reply" : "Update Reply")
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <textarea class="form-control" rows="4" @bind="agentReplyText"
                                                  placeholder="Type your reply to the customer here..."></textarea>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" @bind="markResolvedAfterReply" id="resolveCheck">
                                            <label class="form-check-label" for="resolveCheck">
                                                Mark as resolved after sending reply
                                            </label>
                                        </div>
                                        <button class="btn btn-primary" @onclick="SendAgentReply"
                                                disabled="@(string.IsNullOrWhiteSpace(agentReplyText) || isSendingReply)">
                                            @if (isSendingReply)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            <i class="bi bi-send"></i>
                                            @(string.IsNullOrEmpty(selectedInquiry.AgentReply) ? "Send Reply" : "Update Reply")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle"></i> This inquiry has been resolved.
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // Parameters
    [Parameter] public int? InquiryIdParam { get; set; }
    [SupplyParameterFromQuery] public int? InquiryId { get; set; }

    // Data properties
    private List<CustomerInquiry> allInquiries = new List<CustomerInquiry>();
    private List<CustomerInquiry> filteredInquiries = new List<CustomerInquiry>();
    private CustomerInquiry? selectedInquiry;
    private ApplicationUser? currentUser;

    // UI state
    private bool isLoading = true;
    private bool showDetailsModal = false;

    // Search and filter
    private string searchTerm = "";
    private string statusFilter = "";
    private string priorityFilter = "";

    // Reply system properties
    private string agentReplyText = "";
    private bool markResolvedAfterReply = false;
    private bool isSendingReply = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadInquiries();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Check if we need to open a specific inquiry
        var targetInquiryId = InquiryIdParam ?? InquiryId;

        if (targetInquiryId.HasValue && allInquiries.Any())
        {
            var targetInquiry = allInquiries.FirstOrDefault(i => i.Id == targetInquiryId.Value);
            if (targetInquiry != null)
            {
                // Small delay to ensure UI is rendered
                await Task.Delay(100);
                ShowInquiryDetails(targetInquiry);

                // Clear the URL parameter to avoid showing modal on refresh
                NavigationManager.NavigateTo("/sales/inquiries", replace: true);
            }
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUser = await UserManager.GetUserAsync(authState.User);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading user: {ex.Message}");
        }
    }

    private async Task LoadInquiries()
    {
        try
        {
            isLoading = true;

            allInquiries = await DbContext.CustomerInquiries
                .OrderByDescending(i => i.SubmittedDate)
                .ToListAsync();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading inquiries: {ex.Message}");
            allInquiries = new List<CustomerInquiry>();
            filteredInquiries = new List<CustomerInquiry>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = allInquiries.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(i =>
                i.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                i.Subject.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                i.CustomerEmail.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply status filter
        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            filtered = filtered.Where(i => i.Status == statusFilter);
        }

        // Apply priority filter
        if (!string.IsNullOrWhiteSpace(priorityFilter))
        {
            filtered = filtered.Where(i => i.Priority == priorityFilter);
        }

        filteredInquiries = filtered.OrderByDescending(i => i.SubmittedDate).ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        statusFilter = "";
        priorityFilter = "";
        ApplyFilters();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    // Status and priority helper methods
    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Open" => "warning",
            "InProgress" => "primary",
            "Resolved" => "success",
            _ => "secondary"
        };
    }

    private string GetStatusDisplay(string status)
    {
        return status switch
        {
            "InProgress" => "In Progress",
            _ => status
        };
    }

    private string GetPriorityColor(string priority)
    {
        return priority switch
        {
            "High" => "danger",
            "Medium" => "warning",
            "Low" => "info",
            _ => "secondary"
        };
    }

    // Modal methods
    private void ShowInquiryDetails(CustomerInquiry inquiry)
    {
        selectedInquiry = inquiry;
        showDetailsModal = true;

        // Load existing reply if there is one
        agentReplyText = selectedInquiry.AgentReply ?? "";
        markResolvedAfterReply = false;
    }

    private void CloseModals()
    {
        showDetailsModal = false;
        selectedInquiry = null;
        agentReplyText = "";
        markResolvedAfterReply = false;
        isSendingReply = false;
    }

    // NSend agent reply method
    private async Task SendAgentReply()
    {
        if (selectedInquiry == null || string.IsNullOrWhiteSpace(agentReplyText))
            return;

        try
        {
            isSendingReply = true;

            // Update the inquiry with agent reply
            selectedInquiry.AgentReply = agentReplyText.Trim();
            selectedInquiry.ReplyDate = DateTime.UtcNow;
            selectedInquiry.RepliedBy = currentUser != null ? $"{currentUser.FirstName} {currentUser.LastName}" : "Sales Agent";
            selectedInquiry.LastUpdated = DateTime.UtcNow;

            // Mark as resolved if checkbox is checked
            if (markResolvedAfterReply)
            {
                selectedInquiry.Status = "Resolved";
            }
            else if (selectedInquiry.Status == "Open")
            {
                selectedInquiry.Status = "InProgress";
            }

            // Save to database
            await DbContext.SaveChangesAsync();

            // Show success message
            await JSRuntime.InvokeVoidAsync("alert", "Reply sent successfully!");

            // Close modal if resolved, otherwise keep it open
            if (markResolvedAfterReply)
            {
                CloseModals();
            }

            // Refresh the list
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error sending reply: {ex.Message}");
        }
        finally
        {
            isSendingReply = false;
        }
    }

    // Simplified status update methods
    private async Task MarkInProgress(CustomerInquiry inquiry)
    {
        await UpdateInquiryStatus(inquiry, "InProgress");
    }

    private async Task MarkResolved(CustomerInquiry inquiry)
    {
        await UpdateInquiryStatus(inquiry, "Resolved");
    }

    private async Task SetHighPriority(CustomerInquiry inquiry)
    {
        await UpdateInquiryPriority(inquiry, "High");
    }

    private async Task SetMediumPriority(CustomerInquiry inquiry)
    {
        await UpdateInquiryPriority(inquiry, "Medium");
    }

    private async Task SetLowPriority(CustomerInquiry inquiry)
    {
        await UpdateInquiryPriority(inquiry, "Low");
    }

    private async Task UpdateInquiryStatus(CustomerInquiry inquiry, string newStatus)
    {
        try
        {
            inquiry.Status = newStatus;
            inquiry.LastUpdated = DateTime.UtcNow;

            if (string.IsNullOrEmpty(inquiry.AssignedTo) && currentUser != null)
            {
                inquiry.AssignedTo = $"{currentUser.FirstName} {currentUser.LastName}";
            }

            await DbContext.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Inquiry #{inquiry.Id} status updated to {GetStatusDisplay(newStatus)}");

            if (showDetailsModal)
            {
                CloseModals();
            }

            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating status: {ex.Message}");
        }
    }

    private async Task UpdateInquiryPriority(CustomerInquiry inquiry, string newPriority)
    {
        try
        {
            inquiry.Priority = newPriority;
            inquiry.LastUpdated = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Inquiry #{inquiry.Id} priority updated to {newPriority}");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating priority: {ex.Message}");
        }
    }
}