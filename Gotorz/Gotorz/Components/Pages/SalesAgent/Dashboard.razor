@page "/sales/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Gotorz.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Gotorz.Models
@attribute [Authorize(Roles = "SalesAgent,Admin")]
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Sales Agent Dashboard - Gotorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Sales Agent Dashboard</h1>
    <p class="lead">Welcome @agentName! Manage customer bookings and handle support requests from here.</p>

    <div class="row mb-4">
        <!-- Stats Cards -->
        <div class="col-md-3 mb-4">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Total Bookings</h5>
                    <h2 class="mt-3 mb-0">@totalBookings</h2>
                    <p class="card-text mt-3">Active bookings in the system</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">New Bookings</h5>
                    <h2 class="mt-3 mb-0">@newBookings</h2>
                    <p class="card-text mt-3">Bookings in the last 7 days</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Pending Support</h5>
                    <h2 class="mt-3 mb-0">@pendingSupport</h2>
                    <p class="card-text mt-3">Customer inquiries waiting</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Revenue</h5>
                    <h2 class="mt-3 mb-0">$@revenueFormatted</h2>
                    <p class="card-text mt-3">Total booking revenue</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Recent Bookings -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Recent Bookings</h5>
                </div>
                <div class="card-body">
                    @if (recentBookings.Any())
                    {
                        <div class="list-group mb-3">
                            @foreach (var booking in recentBookings)
                            {
                                <a href="/sales/booking/@booking.Id" class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">
                                            Booking #@booking.Id - @GetDestinationName(booking)
                                        </h6>
                                        <small class="text-@GetStatusColor(booking.Status)">@booking.Status</small>
                                    </div>
                                    <p class="mb-1">Customer: @booking.UserId</p>
                                    <small class="text-muted">Booked: @booking.BookingDate.ToString("MMM d, yyyy") - $@booking.TotalPrice.ToString("N2")</small>
                                </a>
                            }
                        </div>
                        <a href="/sales/bookings" class="btn btn-primary">View All Bookings</a>
                    }
                    else
                    {
                        <p>No recent bookings found.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Customer Inquiries -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Customer Inquiries</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Recent customer inquiries and support requests.</p>

                    @if (realInquiries.Any())
                    {
                        <div class="list-group mb-3">
                            @foreach (var inquiry in realInquiries)
                            {
                                <!-- UPDATED: Make the entire item clickable and navigate with inquiry ID -->
                                <a href="/sales/inquiries?inquiryId=@inquiry.Id" class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@inquiry.Subject</h6>
                                        <small class="@(inquiry.Priority == "High" ? "text-danger" : "text-muted")">
                                            @(inquiry.Priority == "High" ? "🔴 Urgent" : inquiry.SubmittedDate.ToString("MMM d"))
                                        </small>
                                    </div>
                                    <p class="mb-1">From: @inquiry.CustomerName</p>
                                    <p class="mb-1">
                                        <span class="badge bg-@GetInquiryStatusColor(inquiry.Status)">@inquiry.Status</span>
                                        <span class="badge bg-secondary ms-1">@inquiry.Category</span>
                                        @if (inquiry.BookingId.HasValue)
                                        {
                                            <span class="badge bg-info ms-1">Booking #@inquiry.BookingId</span>
                                        }
                                    </p>
                                    <small class="text-muted">@(inquiry.Message.Length > 60 ? inquiry.Message.Substring(0, 60) + "..." : inquiry.Message)</small>
                                </a>
                            }
                        </div>
                        <a href="/sales/inquiries" class="btn btn-primary">View All Inquiries (@realInquiries.Count)</a>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-chat-square-text fs-1 text-muted"></i>
                            <p class="text-muted mt-2">No customer inquiries yet.</p>
                            <p class="small text-muted">Customers can submit inquiries from their dashboard.</p>
                            <a href="/customer/support" class="btn btn-sm btn-outline-primary">Test: Submit Inquiry</a>
                        </div>
                    }
                </div>
                </div>
            </div>
        </div>

    <div class="row">
        <!-- Quick Actions -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/sales/bookings/search" class="btn btn-outline-primary">Search Customer Bookings</a>
                        <a href="/sales/bookings/create" class="btn btn-outline-primary">Create New Booking</a>
                        <a href="/sales/notifications" class="btn btn-outline-primary">Send Customer Notification</a>
                        <a href="/sales/reports" class="btn btn-outline-primary">Generate Reports</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Travel Package Stats -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Popular Destinations</h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">Most popular destinations this month.</p>
                    <div class="list-group">
                        @foreach (var destination in popularDestinations)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@destination.Name</h6>
                                    <span class="badge bg-primary rounded-pill">@destination.BookingCount</span>
                                </div>
                                <small class="text-muted">Average price: $@destination.AveragePrice.ToString("N0")</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (selectedInquiry != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Customer Inquiry Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseInquiryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Customer:</strong> @selectedInquiry.CustomerName</p>
                            <p><strong>Email:</strong> @selectedInquiry.CustomerEmail</p>
                            @if (selectedInquiry.BookingId.HasValue)
                            {
                                <p><strong>Booking:</strong> #@selectedInquiry.BookingId</p>
                            }
                        </div>
                        <div class="col-md-6">
                            <p><strong>Category:</strong> @selectedInquiry.Category</p>
                            <p>
                                <strong>Priority:</strong>
                                <span class="badge bg-@(selectedInquiry.Priority == "High" ? "danger" : selectedInquiry.Priority == "Medium" ? "warning" : "info")">
                                    @selectedInquiry.Priority
                                </span>
                            </p>
                            <p>
                                <strong>Status:</strong>
                                <span class="badge bg-@GetInquiryStatusColor(selectedInquiry.Status)">@selectedInquiry.Status</span>
                            </p>
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>Subject:</h6>
                        <p>@selectedInquiry.Subject</p>
                    </div>

                    <div class="mb-3">
                        <h6>Message:</h6>
                        <div class="border p-3 bg-light rounded">
                            @selectedInquiry.Message
                        </div>
                    </div>

                    <div class="mb-3">
                        <small class="text-muted">
                            Submitted: @selectedInquiry.SubmittedDate.ToString("MMMM d, yyyy 'at' h:mm tt")
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (selectedInquiry.Status == "Open")
                    {
                        <button type="button" class="btn btn-primary" @onclick="MarkAsInProgress">
                            <i class="bi bi-play-circle"></i> Mark In Progress
                        </button>
                    }
                    @if (selectedInquiry.Status != "Resolved")
                    {
                        <button type="button" class="btn btn-success" @onclick="MarkAsResolved">
                            <i class="bi bi-check-circle"></i> Mark Resolved
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="CloseInquiryModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string agentName = "Agent";
    private int totalBookings = 0;
    private int newBookings = 0;
    private int pendingSupport = 0;
    private decimal totalRevenue = 0;
    private string revenueFormatted => totalRevenue.ToString("N0");
    private List<Booking> recentBookings = new List<Booking>();
    private List<CustomerInquiry> realInquiries = new List<CustomerInquiry>();
    private CustomerInquiry? selectedInquiry;

    private class DestinationStat
    {
        public string Name { get; set; }
        public int BookingCount { get; set; }
        public decimal AveragePrice { get; set; }
    }

    private List<DestinationStat> popularDestinations = new List<DestinationStat>();

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            agentName = $"{user.FirstName} {user.LastName}";
        }

        try
        {
            // Load actual booking data
            totalBookings = await DbContext.Bookings.CountAsync();
            newBookings = await DbContext.Bookings
                .Where(b => b.BookingDate >= DateTime.Now.AddDays(-7))
                .CountAsync();

            // Load recent bookings
            recentBookings = await DbContext.Bookings
                .Include(b => b.TravelPackages)
                .OrderByDescending(b => b.BookingDate)
                .Take(5)
                .ToListAsync();

            // Calculate total revenue
            totalRevenue = await DbContext.Bookings.SumAsync(b => b.TotalPrice);

            // Load real customer inquiries
            realInquiries = await DbContext.CustomerInquiries
    .OrderByDescending(i => i.SubmittedDate)
    .Take(5)
    .ToListAsync();

            pendingSupport = await DbContext.CustomerInquiries
                .CountAsync(i => i.Status == "Open");
        }
        catch (Exception)
        {
            // Initialize with empty data if database fails
            totalBookings = 0;
            newBookings = 0;
            totalRevenue = 0;
            realInquiries = new List<CustomerInquiry>();
            pendingSupport = 0;
            recentBookings = new List<Booking>();
            popularDestinations = new List<DestinationStat>();
        }
    }

    private string GetDestinationName(Booking booking)
    {
        if (booking?.TravelPackages == null || !booking.TravelPackages.Any())
            return "Unknown Destination";

        // If there are multiple destinations, list them
        if (booking.TravelPackages.Count > 1)
        {
            return $"{booking.TravelPackages.First().Destination} + {booking.TravelPackages.Count - 1} more";
        }

        return booking.TravelPackages.First().Destination;
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "success",
            "pending" => "warning",
            "cancelled" => "danger",
            _ => "secondary"
        };
    }

    private string GetInquiryStatusColor(string status)
    {
        return status switch
        {
            "Open" => "warning",
            "InProgress" => "primary",
            "Resolved" => "success",
            _ => "secondary"
        };
    }

    private void ShowInquiryModal(CustomerInquiry inquiry)
    {
        selectedInquiry = inquiry;
    }

    private void CloseInquiryModal()
    {
        selectedInquiry = null;
    }

    private async Task MarkAsInProgress()
    {
        if (selectedInquiry != null)
        {
            selectedInquiry.Status = "InProgress";
            selectedInquiry.LastUpdated = DateTime.UtcNow;
            await DbContext.SaveChangesAsync();
            selectedInquiry = null;
            StateHasChanged();
        }
    }

    private async Task MarkAsResolved()
    {
        if (selectedInquiry != null)
        {
            selectedInquiry.Status = "Resolved";
            selectedInquiry.LastUpdated = DateTime.UtcNow;
            await DbContext.SaveChangesAsync();
            selectedInquiry = null;
            StateHasChanged();
        }
    }

    // Method to create mock bookings for preview
    private List<Booking> CreateMockBookings()
    {
        return new List<Booking>
        {
            new Booking {
                Id = 1001,
                UserId = 101,
                BookingDate = DateTime.Now.AddDays(-2),
                TotalPrice = 2499,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Barcelona" }
                }
            },
            new Booking {
                Id = 1002,
                UserId = 102,
                BookingDate = DateTime.Now.AddDays(-3),
                TotalPrice = 3299,
                Status = "Pending",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Rome" }
                }
            },
            new Booking {
                Id = 1003,
                UserId = 103,
                BookingDate = DateTime.Now.AddDays(-5),
                TotalPrice = 4850,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Dubai" }
                }
            },
            new Booking {
                Id = 1004,
                UserId = 104,
                BookingDate = DateTime.Now.AddDays(-1),
                TotalPrice = 1899,
                Status = "Confirmed",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "Paris" }
                }
            },
            new Booking {
                Id = 1005,
                UserId = 105,
                BookingDate = DateTime.Now.AddDays(-7),
                TotalPrice = 2750,
                Status = "Cancelled",
                TravelPackages = new List<TravelPackage> {
                    new TravelPackage { Destination = "London" }
                }
            }
        };
    }

    // Method to create mock destination statistics
    private List<DestinationStat> CreateMockDestinationStats()
    {
        return new List<DestinationStat>
        {
            new DestinationStat { Name = "Barcelona", BookingCount = 28, AveragePrice = 2350 },
            new DestinationStat { Name = "Rome", BookingCount = 22, AveragePrice = 2780 },
            new DestinationStat { Name = "Dubai", BookingCount = 18, AveragePrice = 3950 },
            new DestinationStat { Name = "Paris", BookingCount = 15, AveragePrice = 2480 },
            new DestinationStat { Name = "London", BookingCount = 12, AveragePrice = 2150 }
        };
    }
}