@page "/sales/bookings"
@using Microsoft.AspNetCore.Authorization
@using Gotorz.Data
@using Microsoft.EntityFrameworkCore
@using Gotorz.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ICustomerMessageService CustomerMessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "SalesAgent,Admin")]
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Manage Bookings - Gotorz</PageTitle>

<div class="container-fluid py-4">
    <h1>Booking Management</h1>
    <p class="lead">View and manage customer travel bookings</p>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by booking ID, customer name, or destination" 
                       @bind="searchTerm" @bind:event="oninput" @bind:after="ApplyFilters" />
                <button class="btn btn-primary" type="button" @onclick="ApplyFilters">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="statusFilter" @bind:after="ApplyFilters">
                <option value="">All Statuses</option>
                <option value="Confirmed">Confirmed</option>
                <option value="Pending">Pending</option>
                <option value="Cancelled">Cancelled</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="dateFilter" @bind:after="ApplyFilters">
                <option value="all">All Time</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
            </select>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <h4>Error Loading Bookings</h4>
            <p>@errorMessage</p>
        </div>
    }
    else if (bookings == null || !bookings.Any())
    {
        <div class="alert alert-info">
            <h4>No Bookings Found</h4>
            <p>There are no bookings matching your criteria.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Booking ID</th>
                        <th>Customer</th>
                        <th>Destination</th>
                        <th>Booking Date</th>
                        <th>Travel Dates</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in bookings)
                    {
                        <tr>
                            <td>@booking.Id</td>
                            <td>@GetCustomerInfo(booking)</td>
                            <td>@GetDestinationName(booking)</td>
                            <td>@booking.BookingDate.ToString("MM/dd/yyyy")</td>
                            <td>@GetTravelDates(booking)</td>
                            <td>$@booking.TotalPrice.ToString("N2")</td>
                            <td>
                                <span class="badge bg-@GetStatusColor(booking.Status)">@booking.Status</span>
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="/sales/booking/@booking.Id" class="btn btn-sm btn-primary">View</a>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowStatusModal(booking)" @onclick:stopPropagation="true">Status</button>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowNotificationModal(booking)" @onclick:stopPropagation="true">Notify</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <nav aria-label="Booking navigation">
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@if (selectedBooking != null && showStatusModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Booking Status</h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <p>Update status for Booking #@selectedBooking.Id - @GetDestinationName(selectedBooking)</p>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" @bind="newStatus">
                            <option value="Confirmed">Confirmed</option>
                            <option value="Pending">Pending</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Comment</label>
                        <textarea class="form-control" rows="3" placeholder="Add a comment about this status change (optional)" @bind="statusComment"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateBookingStatus">Update Status</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (selectedBooking != null && showNotificationModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Send Customer Notification</h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <p>Send notification to customer for Booking #@selectedBooking.Id - @GetDestinationName(selectedBooking)</p>
                    <div class="mb-3">
                        <label class="form-label">Message Type</label>
                        <select class="form-select" @bind="notificationType">
                            <option value="General">General Communication</option>
                            <option value="SystemNotification">System Notification</option>
                            <option value="Support">Support Message</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Subject</label>
                        <input type="text" class="form-control" placeholder="Notification subject" @bind="notificationSubject" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Message</label>
                        <textarea class="form-control" rows="5" placeholder="Type your message here..." @bind="notificationMessage"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SendNotification">Send Notification</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showNotificationSuccess)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center py-4">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                    <h4 class="mt-3 text-success">Message Sent Successfully!</h4>
                    <p class="text-muted">Your notification has been delivered.</p>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Booking> allBookings = new List<Booking>();
    private List<Booking> bookings = new List<Booking>();
    private bool isLoading = true;
    private string errorMessage;
    
    // Search and filter
    private string searchTerm = "";
    private string statusFilter = "";
    private string dateFilter = "all";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    
    // Modals
    private Booking selectedBooking;
    private bool showStatusModal = false;
    private bool showNotificationModal = false;
    private string newStatus = "Confirmed";
    private string statusComment = "";
    private string notificationType = "General";
    private string notificationSubject = "";
    private string notificationMessage = "";
    private bool showNotificationSuccess = false;

    // Customer info cache
    private Dictionary<string, string> customerInfoCache = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Load all bookings from the database
            allBookings = await DbContext.Bookings
                .Include(b => b.TravelPackages)
                .OrderByDescending(b => b.BookingDate)
                .ToListAsync();

            // Preload customer information for all bookings
            await LoadCustomerInfoAsync();
                
            // Apply initial filtering
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading bookings: {ex.Message}";
            
            // For demo purposes, create mock bookings if database fails
            allBookings = CreateMockBookings();
            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCustomerInfoAsync()
    {
        customerInfoCache.Clear();
        
        foreach (var booking in allBookings)
        {
            try
            {
                var customer = await UserManager.FindByIdAsync(booking.UserId.ToString());
                if (customer != null)
                {
                    customerInfoCache[booking.UserId] = $"{customer.FirstName} {customer.LastName} ({customer.Email})";
                }
                else
                {
                    // If no customer found by ID, show a professional fallback
                    customerInfoCache[booking.UserId] = $"Customer #{booking.UserId}";
                }
            }
            catch
            {
                customerInfoCache[booking.UserId] = $"Customer #{booking.UserId}";
            }
        }
    }

    private string GetCustomerInfo(Booking booking)
    {
        return customerInfoCache.TryGetValue(booking.UserId, out var info) ? info : $"Customer #{booking.UserId}";
    }
    
    private void ApplyFilters()
    {
        var filteredBookings = allBookings;
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredBookings = filteredBookings.Where(b => 
                b.Id.ToString().Contains(searchTerm) || 
                GetDestinationName(b).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                GetCustomerInfo(b).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                b.UserId.ToString().Contains(searchTerm)
            ).ToList();
        }
        
        // Apply status filter
        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            filteredBookings = filteredBookings.Where(b => b.Status == statusFilter).ToList();
        }
        
        // Apply date filter
        if (dateFilter != "all")
        {
            DateTime cutoffDate = DateTime.Now;
            
            switch (dateFilter)
            {
                case "today":
                    cutoffDate = DateTime.Today;
                    filteredBookings = filteredBookings.Where(b => b.BookingDate.Date == DateTime.Today).ToList();
                    break;
                case "week":
                    cutoffDate = DateTime.Now.AddDays(-7);
                    filteredBookings = filteredBookings.Where(b => b.BookingDate >= cutoffDate).ToList();
                    break;
                case "month":
                    cutoffDate = DateTime.Now.AddDays(-30);
                    filteredBookings = filteredBookings.Where(b => b.BookingDate >= cutoffDate).ToList();
                    break;
            }
        }

        // Calculate total pages
        totalPages = (int)Math.Ceiling(filteredBookings.Count / (double)pageSize);

        // Get current page
        bookings = filteredBookings
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        // Reset to first page if no results on current page
        if (bookings.Count == 0 && totalPages > 0)
        {
            currentPage = 1;
            bookings = filteredBookings
                .Take(pageSize)
                .ToList();
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        ApplyFilters();
    }

    private string GetDestinationName(Booking booking)
    {
        if (booking?.TravelPackages == null || !booking.TravelPackages.Any())
            return "Unknown Destination";

        // If there are multiple destinations, list them
        if (booking.TravelPackages.Count > 1)
        {
            return $"{booking.TravelPackages.First().Destination} + {booking.TravelPackages.Count - 1} more";
        }

        return booking.TravelPackages.First().Destination;
    }

    private string GetTravelDates(Booking booking)
    {
        if (booking?.TravelPackages == null || !booking.TravelPackages.Any())
            return "N/A";

        var package = booking.TravelPackages.First();
        return $"{package.StartDate:MM/dd/yyyy} - {package.EndDate:MM/dd/yyyy}";
    }

    private string GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "confirmed" => "success",
            "pending" => "warning",
            "cancelled" => "danger",
            _ => "secondary"
        };
    }

    private void ShowStatusModal(Booking booking)
    {
        selectedBooking = booking;
        newStatus = booking.Status;
        statusComment = "";
        showStatusModal = true;
        showNotificationModal = false;
    }

    private void ShowNotificationModal(Booking booking)
    {
        selectedBooking = booking;
        notificationSubject = $"Information about your booking to {GetDestinationName(booking)}";
        notificationType = "General";
        notificationMessage = "";
        showNotificationModal = true;
        showStatusModal = false;
    }

    private void CloseModals()
    {
        showStatusModal = false;
        showNotificationModal = false;
        showNotificationSuccess = false;
        selectedBooking = null;
        errorMessage = null;
    }

    private async Task UpdateBookingStatus()
    {
        if (selectedBooking != null && !string.IsNullOrEmpty(newStatus))
        {
            try
            {
                // Update status in database
                selectedBooking.Status = newStatus;
                await DbContext.SaveChangesAsync();

                // Send status change notification to customer if there's a comment
                if (!string.IsNullOrWhiteSpace(statusComment))
                {
                    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    var currentUser = await UserManager.GetUserAsync(authState.User);
                    
                    if (currentUser != null)
                    {
                        // Send to test customer
                        var customer = await UserManager.FindByEmailAsync("testcustomer@gmail.com");
                        if (customer != null)
                        {
                            await CustomerMessageService.SendMessageAsync(
                                currentUser.Id,
                                customer.Email,
                                $"Booking Status Updated - #{selectedBooking.Id}",
                                $"Booking status has been updated to: {newStatus}\n\nComment: {statusComment}",
                                Gotorz.Models.MessageType.BookingChange,
                                selectedBooking.Id
                            );
                        }
                    }
                }

                // Close modal and refresh list
                CloseModals();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error updating booking status: {ex.Message}";
            }
        }
    }

    private async Task SendNotification()
    {
        try
        {
            if (selectedBooking != null && !string.IsNullOrWhiteSpace(notificationSubject) && !string.IsNullOrWhiteSpace(notificationMessage))
            {
                // Get current sales agent
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var currentUser = await UserManager.GetUserAsync(authState.User);
                
                if (currentUser != null)
                {
                    ApplicationUser customer = null;
                    
                    // Find the test customer by email
                    customer = await UserManager.FindByEmailAsync("testcustomer@gmail.com");
                    
                    if (customer == null)
                    {
                        // Fallback: Find any user with Customer role
                        var customerUsers = await UserManager.GetUsersInRoleAsync("Customer");
                        customer = customerUsers.FirstOrDefault();
                    }
                    
                    if (customer == null)
                    {
                        // Last resort: Use yourself for testing
                        customer = currentUser;
                    }
                    
                    // Parse the message type
                    var msgType = notificationType switch
                    {
                        "SystemNotification" => Gotorz.Models.MessageType.SystemNotification,
                        "Support" => Gotorz.Models.MessageType.Support,
                        _ => Gotorz.Models.MessageType.General
                    };

                    // Send the message
                    await CustomerMessageService.SendMessageAsync(
                        currentUser.Id,
                        customer.Email,
                        notificationSubject,
                        notificationMessage,
                        msgType,
                        selectedBooking.Id
                    );

                    // Show success and auto-close after 1.5 seconds
                    showNotificationSuccess = true;
                    StateHasChanged();
                    
                    await Task.Delay(1500);
                    CloseModals();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error sending notification: {ex.Message}";
        }
    }

    // Method to create mock bookings for preview when database is not available
    private List<Booking> CreateMockBookings()
    {
        var mockBookings = new List<Booking>();
        var random = new Random();
        string[] destinations = { "Barcelona", "Rome", "Dubai", "Paris", "London", "New York", "Tokyo" };
        string[] statuses = { "Confirmed", "Pending", "Cancelled" };

        // Create 30 mock bookings
        for (int i = 1; i <= 30; i++)
        {
            var destination = destinations[random.Next(destinations.Length)];
            var status = statuses[random.Next(statuses.Length)];
            var bookingDate = DateTime.Now.AddDays(-random.Next(1, 30));
            var startDate = bookingDate.AddDays(random.Next(10, 60));
            var endDate = startDate.AddDays(random.Next(3, 14));
            var price = random.Next(1000, 5000);

            mockBookings.Add(new Booking
                {
                    Id = 1000 + i,
                    UserId = (100 + i).ToString(),
                    BookingDate = bookingDate,
                    TotalPrice = price,
                    Status = status,
                    TravelPackages = new List<TravelPackage>
                {
                    new TravelPackage
                    {
                        Destination = destination,
                        StartDate = startDate,
                        EndDate = endDate,
                        Price = price * 0.85m
                    }
                }
                });
        }

        return mockBookings;
    }
}