@page "/package/{PackageId}"
@using Gotorz.Models
@using Gotorz.Services
@using Gotorz.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject ITravelPackageService TravelPackageService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime
@inject ILogger<PackageDetails> Logger
@inject IActivityLogService ActivityLogService
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<PageTitle>Travel Package Details - Gotorz</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading package details...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <h4>Error</h4>
            <p>@errorMessage</p>
            <a href="/search" class="btn btn-primary">Return to Search</a>
        </div>
    }
    else if (travelPackage == null)
    {
        <div class="alert alert-warning">
            <h4>Package Not Found</h4>
            <p>The requested travel package could not be found.</p>
            <a href="/search" class="btn btn-primary">Return to Search</a>
        </div>
    }
    else
    {
        <div class="package-header mb-4">
            <div class="package-hero-img" style="background-image: url('@travelPackage.ImageUrl')"></div>
            <div class="package-title mt-3">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h1>@travelPackage.OriginCity to @travelPackage.Destination</h1>
                        <p class="lead">
                            @travelPackage.StartDate.ToString("MMM d") - @travelPackage.EndDate.ToString("MMM d"), @travelPackage.StartDate.Year
                            <span class="badge bg-info ms-2">@travelPackage.GetDuration()</span>
                        </p>
                    </div>
                    <div class="package-price-tag">
                        <span class="price-label">Total price</span>
                        <span class="price-value">$@travelPackage.GetFormattedPrice()</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Trip Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="package-detail-section">
                            <h4>Flight Information</h4>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="detail-item">
                                        <span class="detail-label">Airline</span>
                                        <span class="detail-value">@travelPackage.Airline</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Departure</span>
                                        <span class="detail-value">@travelPackage.FlightDepartureTime.ToString("h:mm tt, MMM d")</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="detail-item">
                                        <span class="detail-label">Origin</span>
                                        <span class="detail-value">@travelPackage.OriginCity</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Arrival</span>
                                        <span class="detail-value">@travelPackage.FlightArrivalTime.ToString("h:mm tt, MMM d")</span>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-3">
                                <div class="detail-item">
                                    <span class="detail-label">Return Flight</span>
                                    <span class="detail-value">@(travelPackage.ReturnFlightIncluded ? "Included" : "Not Included")</span>
                                </div>
                            </div>
                        </div>

                        <hr />

                        <div class="package-detail-section">
                            <h4>Accommodation</h4>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="detail-item">
                                        <span class="detail-label">Hotel</span>
                                        <span class="detail-value">@travelPackage.HotelName</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Check-in</span>
                                        <span class="detail-value">@travelPackage.StartDate.ToString("MMMM d, yyyy")</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="detail-item">
                                        <span class="detail-label">Rating</span>
                                        <span class="detail-value hotel-stars">@travelPackage.GetStars()</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Check-out</span>
                                        <span class="detail-value">@travelPackage.EndDate.ToString("MMMM d, yyyy")</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr />

                        <div class="package-detail-section">
                            <h4>Destination Highlights</h4>
                            <ul class="package-features">
                                <li>
                                    <i class="bi bi-check-circle-fill"></i> Explore the vibrant culture and attractions of @travelPackage.Destination
                                </li>
                                <li>
                                    <i class="bi bi-check-circle-fill"></i> Stay at the highly-rated @travelPackage.HotelName
                                </li>
                                <li>
                                    <i class="bi bi-check-circle-fill"></i> Convenient @travelPackage.GetDuration() stay with flexible scheduling
                                </li>
                                <li>
                                    <i class="bi bi-check-circle-fill"></i> Flights with @travelPackage.Airline for a comfortable journey
                                </li>
                                <li>
                                    <i class="bi bi-check-circle-fill"></i> All taxes and fees included in the price
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">About @travelPackage.Destination</h5>
                    </div>
                    <div class="card-body">
                        <p>@travelPackage.Description</p>
                        <p>
                            The climate in @travelPackage.Destination during your stay will typically be pleasant,
                            making it perfect for sightseeing and outdoor activities. Remember to pack appropriately for the season
                            and check local weather forecasts before your departure.
                        </p>
                        <p>
                            Local currency, timezone information, and other travel tips will be provided in your booking confirmation.
                        </p>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Booking Information</h5>
                    </div>
                    <div class="card-body">
                        <h6>Cancellation Policy</h6>
                        <p>
                            Bookings cancelled 30 days or more before departure receive a 90% refund.
                            Bookings cancelled 15-29 days before departure receive a 50% refund.
                            Bookings cancelled less than 15 days before departure are non-refundable.
                        </p>

                        <h6>What's Included</h6>
                        <ul>
                            <li>Round-trip flights from @travelPackage.OriginCity to @travelPackage.Destination</li>
                            <li>@travelPackage.GetDuration() accommodation at @travelPackage.HotelName</li>
                            <li>Airport transfers</li>
                            <li>All taxes and fees</li>
                        </ul>

                        <h6>What's Not Included</h6>
                        <ul>
                            <li>Travel insurance (recommended)</li>
                            <li>Meals not specified</li>
                            <li>Optional activities and tours</li>
                            <li>Personal expenses</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card booking-card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Book This Trip</h5>
                    </div>
                    <div class="card-body">
                        <div class="price-summary mb-4">
                            <div class="price-item">
                                <span>Flight</span>
                                <span>$@(travelPackage.Flight?.Price.ToString("N0") ?? "0")</span>
                            </div>
                            <div class="price-item">
                                <span>Hotel (@travelPackage.GetDuration())</span>
                                <span>$@(GetHotelTotalPrice().ToString("N0"))</span>
                            </div>
                            <div class="price-item">
                                <span>Taxes & Fees</span>
                                <span>Included</span>
                            </div>
                            <div class="price-total">
                                <span>Total</span>
                                <span>$@travelPackage.GetFormattedPrice()</span>
                            </div>
                        </div>

                        <!-- Availability Status -->
                        @if (!IsPackageAvailable())
                        {
                            <div class="alert alert-warning mb-3">
                                <small>
                                    <i class="bi bi-exclamation-triangle"></i>
                                    @GetAvailabilityMessage()
                                </small>
                            </div>
                        }

                        <div class="d-grid gap-2">
                            <button class="btn btn-primary btn-lg"
                                    @onclick="() => BookNow(travelPackage.Id)"
                                    disabled="@(isBookingInProgress || !IsPackageAvailable())">
                                @if (isBookingInProgress)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Processing...</span>
                                }
                                else if (!IsPackageAvailable())
                                {
                                    <span>Not Available</span>
                                }
                                else
                                {
                                    <span>Book Now</span>
                                }
                            </button>
                            <a href="/search" class="btn btn-outline-secondary">
                                Back to Search
                            </a>
                        </div>

                        <div class="booking-info mt-4">
                            <div class="info-item">
                                <i class="bi bi-shield-check"></i>
                                <span>Secure booking process</span>
                            </div>
                            <div class="info-item">
                                <i class="bi bi-credit-card"></i>
                                <span>Pay securely by credit card</span>
                            </div>
                            <div class="info-item">
                                <i class="bi bi-telephone"></i>
                                <span>Need help? Call +1-800-Gotorz-1</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Similar Packages</h5>
                    </div>
                    <div class="card-body p-0">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                <a href="#" class="text-decoration-none">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Barcelona Weekend</span>
                                        <span class="badge bg-secondary">$599</span>
                                    </div>
                                    <small class="text-muted">3 nights, flights included</small>
                                </a>
                            </li>
                            <li class="list-group-item">
                                <a href="#" class="text-decoration-none">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Roman Holiday</span>
                                        <span class="badge bg-secondary">$899</span>
                                    </div>
                                    <small class="text-muted">5 nights, flights included</small>
                                </a>
                            </li>
                            <li class="list-group-item">
                                <a href="#" class="text-decoration-none">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Luxury Dubai</span>
                                        <span class="badge bg-secondary">$1,299</span>
                                    </div>
                                    <small class="text-muted">7 nights, flights included</small>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Login Required Modal -->
@if (showLoginModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login Required</h5>
                    <button type="button" class="btn-close" @onclick="CloseLoginModal"></button>
                </div>
                <div class="modal-body">
                    <p>You need to be logged in to book a travel package.</p>
                    <p>Would you like to login or create an account?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLoginModal">Cancel</button>
                    <a href="/Account/Login?returnUrl=@Uri.EscapeDataString(NavigationManager.Uri)" class="btn btn-primary">Login</a>
                    <a href="/Account/Register?returnUrl=@Uri.EscapeDataString(NavigationManager.Uri)" class="btn btn-outline-primary">Register</a>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Booking Confirmation Modal -->
@if (showConfirmModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Your Booking</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you ready to book this amazing trip?</p>
                    <div class="booking-summary">
                        <h6>@travelPackage.OriginCity to @travelPackage.Destination</h6>
                        <p>@travelPackage.StartDate.ToString("MMM d") - @travelPackage.EndDate.ToString("MMM d"), @travelPackage.StartDate.Year</p>
                        <p><strong>Total Price: $@travelPackage.GetFormattedPrice()</strong></p>
                    </div>
                    @if (currentUser != null)
                    {
                        <div class="customer-info mt-3">
                            <h6>Booking for:</h6>
                            <p>@currentUser.FirstName @currentUser.LastName (@currentUser.Email)</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ProceedToBooking">
                        Yes, Proceed to Booking
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string PackageId { get; set; }

    private TravelPackageViewModel travelPackage;
    private ApplicationUser currentUser;
    private bool isLoading = true;
    private bool isBookingInProgress = false;
    private string errorMessage;
    private bool showLoginModal = false;
    private bool showConfirmModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            Logger.LogInformation($"Loading package details for ID: {PackageId}");

            // Get current user if authenticated
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                currentUser = await UserManager.GetUserAsync(authState.User);
            }

            // Load the travel package details
            travelPackage = await TravelPackageService.GetPackageByIdAsync(PackageId);

            if (travelPackage == null)
            {
                errorMessage = "Travel package not found.";
                Logger.LogWarning($"Package not found for ID: {PackageId}");
            }
            else
            {
                Logger.LogInformation($"Successfully loaded package: {travelPackage.Destination}");

                // ** AUDIT LOG - Package View **
                if (currentUser != null)
                {
                    await ActivityLogService.LogActivityAsync(
                        currentUser.Id,
                        "Package Viewed",
                        $"Viewed package: {travelPackage.Destination} (ID: {PackageId})",
                        HttpContextAccessor.HttpContext
                    );
                }
                else
                {
                    // Log anonymous view (optional)
                    await ActivityLogService.LogActivityAsync(
                        "anonymous",
                        "Package Viewed (Anonymous)",
                        $"Anonymous user viewed package: {travelPackage.Destination} (ID: {PackageId})",
                        HttpContextAccessor.HttpContext
                    );
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading package details: {ex.Message}";
            Logger.LogError($"Error in PackageDetails.OnInitializedAsync: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private decimal GetHotelTotalPrice()
    {
        if (travelPackage?.Hotel == null) return 0;

        var nights = (travelPackage.EndDate - travelPackage.StartDate).Days;
        return travelPackage.Hotel.PricePerNight * nights;
    }


    private async Task BookNow(string packageId)
    {
        try
        {
            isBookingInProgress = true;
            StateHasChanged();

            Logger.LogInformation($"BookNow called for package {packageId}");

            // Check if user is authenticated
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                Logger.LogInformation("User not authenticated, showing login modal");
                showLoginModal = true;
                return;
            }

            // Check package availability
            if (!IsPackageAvailable())
            {
                Logger.LogWarning("Package not available for booking");
                await JSRuntime.InvokeVoidAsync("alert", GetAvailabilityMessage());
                return;
            }

            // Validate package ID
            if (string.IsNullOrEmpty(packageId))
            {
                Logger.LogError("Invalid package ID");
                await JSRuntime.InvokeVoidAsync("alert", "Invalid package ID");
                return;
            }

            // Get fresh user info if not loaded
            if (currentUser == null)
            {
                currentUser = await UserManager.GetUserAsync(authState.User);
            }

            Logger.LogInformation($"Showing confirmation modal for user {currentUser?.Email}");

            // Show confirmation modal
            showConfirmModal = true;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in BookNow: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isBookingInProgress = false;
            StateHasChanged();
        }
    }

    private async Task ProceedToBooking()
    {
        try
        {
            Logger.LogInformation($"Proceeding to booking page for package {travelPackage.Id}");

            // Add a small delay to show processing
            await Task.Delay(300);

            // Navigate to booking page
            NavigationManager.NavigateTo($"/package/book/{travelPackage.Id}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error proceeding to booking: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private bool IsPackageAvailable()
    {
        if (travelPackage == null) return false;

        // Check if the trip is in the future
        if (travelPackage.StartDate <= DateTime.Now.Date)
        {
            return false;
        }

        // Check if there's enough time to book (at least 1 day in advance)
        if (travelPackage.StartDate <= DateTime.Now.Date.AddDays(1))
        {
            return false;
        }

        // Add other availability checks here (inventory, etc.)
        return true;
    }

    private string GetAvailabilityMessage()
    {
        if (travelPackage == null) return "Package not available";

        if (travelPackage.StartDate <= DateTime.Now.Date)
        {
            return "This trip has already started or passed.";
        }

        if (travelPackage.StartDate <= DateTime.Now.Date.AddDays(1))
        {
            return "Bookings must be made at least 24 hours in advance.";
        }

        return "This package is currently not available for booking.";
    }


    private void CloseLoginModal()
    {
        showLoginModal = false;
        isBookingInProgress = false;
        StateHasChanged();
    }

    private void CloseConfirmModal()
    {
        showConfirmModal = false;
        isBookingInProgress = false;
        StateHasChanged();
    }
}