@page "/customer/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http.Connections
@using Gotorz.Data
@using Gotorz.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Customer Chat - Gotorz</PageTitle>

<AuthorizeView Roles="Customer">
    <Authorized>
        <div class="container-fluid py-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1>Customer Chat</h1>
                    <p class="lead mb-0">Connect with fellow travelers</p>
                </div>
                <div>
                    @if (isConnected)
                    {
                        <span class="badge bg-success">
                            <i class="bi bi-circle-fill"></i> Online
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-warning">
                            <i class="bi bi-circle-fill"></i> Connecting...
                        </span>
                    }
                </div>
            </div>

            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="bi bi-chat-dots"></i> General Chat
                            </h6>
                            <small class="text-muted">
                                Welcome @currentUserName
                            </small>
                        </div>
                        <div class="card-body p-0">
                            <!-- Messages Area -->
                            <div id="messages-container" class="p-3" style="height: 500px; overflow-y: auto; background-color: #f8f9fa;">
                                @if (messages.Any())
                                {
                                    @foreach (var msg in messages)
                                    {
                                        <div class="mb-3">
                                            <div class="d-flex align-items-start">
                                                <div class="flex-grow-1">
                                                    <div class="d-flex align-items-center mb-1">
                                                        <strong class="me-2 @(msg.SenderId == currentUserId ? "text-primary" : "")">
                                                            @(msg.SenderId == currentUserId ? "You" : msg.SenderName)
                                                        </strong>
                                                        <small class="text-muted">
                                                            @msg.Timestamp.ToString("MMM dd, HH:mm")
                                                        </small>
                                                    </div>
                                                    <div class="bg-white p-3 rounded shadow-sm @(msg.SenderId == currentUserId ? "border-start border-primary border-3" : "")">
                                                        @msg.Message
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted py-5">
                                        <i class="bi bi-chat-square-text fs-1"></i>
                                        <p class="mt-3">No messages yet. Start the conversation!</p>
                                    </div>
                                }
                            </div>

                            <!-- Message Input -->
                            <div class="p-3 border-top bg-white">
                                <div class="input-group">
                                    <input @bind="messageInput"
                                           @onkeypress="HandleKeyPress"
                                           class="form-control"
                                           placeholder="Type your message here..."
                                           maxlength="500" />
                                    <button class="btn btn-primary"
                                            @onclick="SendMessage"
                                            disabled="@(string.IsNullOrWhiteSpace(messageInput) || !isConnected)">
                                        <i class="bi bi-send"></i> Send
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container py-5 text-center">
            <h3>Access Denied</h3>
            <p>You need to be logged in as a Customer to access the chat.</p>
            <a href="/Account/Login" class="btn btn-primary">Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new();
    private string messageInput = string.Empty;
    private string currentUserId = string.Empty;
    private string currentUserName = string.Empty;
    private bool isConnected = false;
    private const string GENERAL_CHAT_ROOM = "general_chat";

    protected override async Task OnInitializedAsync()
    {
        // Get current user info first
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var currentUser = await UserManager.GetUserAsync(authState.User);
            if (currentUser != null)
            {
                currentUserId = currentUser.Id;
                currentUserName = $"{currentUser.FirstName} {currentUser.LastName}";

                // Load existing messages
                await LoadChatHistory();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(currentUserId))
        {
            // Initialize SignalR connection after the component is rendered
            // This ensures the authentication context is properly established
            await InitializeSignalR();
        }
    }

    private async Task InitializeSignalR()
    {
        try
        {
            // Get the current HTTP context to access cookies
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext == null)
            {
                Console.WriteLine("HttpContext is null - cannot initialize SignalR");
                return;
            }

            // Build the hub connection with authentication cookies
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chathub"), options =>
                {
                    // Pass authentication cookies to the SignalR connection
                    if (httpContext.Request.Headers.ContainsKey("Cookie"))
                    {
                        options.Headers.Add("Cookie", httpContext.Request.Headers["Cookie"].ToString());
                    }

                    // Alternative approach: Access the cookies directly
                    foreach (var cookie in httpContext.Request.Cookies)
                    {
                        options.Cookies.Add(new System.Net.Cookie(cookie.Key, cookie.Value, "/", httpContext.Request.Host.Host));
                    }
                })
                .WithAutomaticReconnect()
                .Build();

            // Handle connection state changes
            hubConnection.Closed += async (error) =>
            {
                isConnected = false;
                Console.WriteLine($"SignalR connection closed: {error?.Message ?? "Normal closure"}");
                await InvokeAsync(StateHasChanged);

                // Try to reconnect after 5 seconds if it was an unexpected closure
                if (error != null)
                {
                    await Task.Delay(5000);
                    await StartConnection();
                }
            };

            hubConnection.Reconnecting += async (error) =>
            {
                isConnected = false;
                Console.WriteLine($"SignalR reconnecting: {error?.Message ?? "Unknown error"}");
                await InvokeAsync(StateHasChanged);
            };

            hubConnection.Reconnected += async (connectionId) =>
            {
                isConnected = true;
                Console.WriteLine($"SignalR reconnected with ID: {connectionId}");

                // Rejoin the chat room after reconnection
                await hubConnection.SendAsync("JoinDestinationGroup", GENERAL_CHAT_ROOM);
                await InvokeAsync(StateHasChanged);
            };

            // Handle incoming messages
            hubConnection.On<string, string, DateTime>("ReceiveDestinationMessage", (senderName, message, timestamp) =>
            {
                Console.WriteLine($"Received message from {senderName}: {message}");

                var newMessage = new ChatMessage
                    {
                        SenderName = senderName,
                        Message = message,
                        Destination = GENERAL_CHAT_ROOM,
                        Timestamp = timestamp,
                        MessageType = ChatMessageType.DestinationGroup,
                        SenderId = senderName == currentUserName ? currentUserId : "unknown"
                    };

                messages.Add(newMessage);
                InvokeAsync(StateHasChanged);
                InvokeAsync(() => ScrollToBottom());
            });

            hubConnection.On<string, string>("UserJoined", (userName, destination) =>
            {
                Console.WriteLine($"User joined: {userName} in {destination}");

                if (destination == GENERAL_CHAT_ROOM)
                {
                    var systemMessage = new ChatMessage
                        {
                            SenderName = "System",
                            Message = $"{userName} joined the chat",
                            Destination = GENERAL_CHAT_ROOM,
                            Timestamp = DateTime.UtcNow,
                            MessageType = ChatMessageType.DestinationGroup,
                            SenderId = "system"
                        };

                    messages.Add(systemMessage);
                    InvokeAsync(StateHasChanged);
                    InvokeAsync(() => ScrollToBottom());
                }
            });

            // Start the connection
            await StartConnection();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing SignalR: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            isConnected = false;
            StateHasChanged();
        }
    }

    private async Task StartConnection()
    {
        try
        {
            Console.WriteLine("Starting SignalR connection...");
            await hubConnection!.StartAsync();

            isConnected = hubConnection.State == HubConnectionState.Connected;

            if (isConnected)
            {
                Console.WriteLine("SignalR connected successfully");
                Console.WriteLine("Joining general chat room...");
                await hubConnection.SendAsync("JoinDestinationGroup", GENERAL_CHAT_ROOM);
                Console.WriteLine("Successfully joined general chat room");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            isConnected = false;
            StateHasChanged();
        }
    }

    private async Task LoadChatHistory()
    {
        try
        {
            var existingMessages = await DbContext.ChatMessages
                .Where(m => m.Destination == GENERAL_CHAT_ROOM && m.MessageType == ChatMessageType.DestinationGroup)
                .OrderBy(m => m.Timestamp)
                .Take(50)
                .ToListAsync();

            messages.AddRange(existingMessages);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chat history: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection?.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(messageInput))
        {
            var message = messageInput.Trim();

            try
            {
                Console.WriteLine($"Sending message: '{message}'");

                messageInput = string.Empty;
                StateHasChanged(); // Update UI immediately

                await hubConnection.SendAsync("SendMessageToDestination", GENERAL_CHAT_ROOM, message);
                Console.WriteLine("Message sent successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
                // Restore message if sending failed
                messageInput = message;
                StateHasChanged();
            }
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages-container");
        }
        catch
        {
            // Ignore scroll errors
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>